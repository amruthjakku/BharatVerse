[project]
name = "bharatverse"
version = "1.0.0"
description = "Preserving India's Cultural Heritage - An open-source platform for capturing, preserving, and sharing India's diverse cultural traditions"
authors = [
    {name = "BharatVerse Team", email = "team@bharatverse.org"}
]
license = {text = "AGPL-3.0"}
readme = "README.md"
requires-python = ">=3.10"
keywords = ["cultural-heritage", "india", "preservation", "ai", "streamlit"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "streamlit>=1.28.0",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "requests>=2.31.0",
    "httpx>=0.24.0",
    "authlib>=1.2.0",
    "python-jose[cryptography]>=3.3.0",
    "python-dotenv>=1.0.0",
    "plotly>=5.15.0",
    "pillow>=10.0.0",
    "python-dateutil>=2.8.0",
    "pytz>=2023.3",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "psycopg2-binary>=2.9.7",
    "sqlalchemy>=2.0.0",
    "redis>=4.6.0",
    "boto3>=1.34.0",
    "minio>=7.2.0",
    "psutil>=5.9.0",
    "aiohttp>=3.8.0",
    "aiofiles>=23.0.0",
    "python-multipart>=0.0.6",
    "sounddevice>=0.4.6",
    "soundfile>=0.12.1",
    "librosa>=0.10.0",
    "pydub>=0.25.0",
    "langdetect>=1.0.9",
    "diskcache>=5.6.0",
    "toml>=0.10.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.23.2",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "ipython>=8.20.0",
    "jupyter>=1.0.0",
    "pre-commit>=3.6.0",
    "ipdb>=0.13.13",
]
ai = [
    "openai>=1.0.0",
    "anthropic>=0.8.0",
    "transformers>=4.30.0",
    "torch>=2.0.0",
    "sentence-transformers>=2.2.0",
    "langchain>=0.1.0",
    "chromadb>=0.4.0",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=1.25.0",
]

[project.urls]
Homepage = "https://bharatverse.org"
Repository = "https://code.swecha.org/amruth_jakku/bharatverse"
Documentation = "https://bharatverse.readthedocs.io"
"Bug Tracker" = "https://code.swecha.org/amruth_jakku/bharatverse/-/issues"

# Ruff configuration - replaces black, isort, flake8, pylint
[tool.ruff]
target-version = "py310"
line-length = 88
src = [".", "streamlit_app", "utils", "core", "api", "scripts"]

# Enable comprehensive rule sets
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "S",    # flake8-bandit (security)
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "ARG",  # flake8-unused-arguments
    "DTZ",  # flake8-datetimez
    "ERA",  # eradicate (commented code)
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "PERF", # perflint
    "FURB", # refurb
    "LOG",  # flake8-logging
    "RUF",  # ruff-specific rules
]

ignore = [
    "E501",   # line too long, handled by formatter
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "S101",   # use of assert
    "T201",   # print statements (common in streamlit apps)
    "T203",   # pprint statements
    "PD901",  # avoid using the generic variable name df for DataFrames
    "RET504", # unnecessary variable assignment before return
    "TRY003", # avoid specifying long messages outside the exception class
    "PLW2901", # redefined loop variable
    "S603",   # subprocess call: check for execution of untrusted input
    "S607",   # starting a process with a partial executable path
]

# Per-file ignores
[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/**/*.py" = ["S101", "PLR2004", "ARG001", "ARG002"]
"scripts/**/*.py" = ["T201", "S602", "S603", "S607"]
"streamlit_app/**/*.py" = ["T201", "S602"]
"pages/**/*.py" = ["T201"]

# Import sorting configuration
[tool.ruff.isort]
known-first-party = ["bharatverse", "streamlit_app", "utils", "core", "api"]
force-single-line = false
force-sort-within-sections = true
split-on-trailing-comma = true

# Formatter configuration (replaces black)
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 60

# Pylint-style configuration
[tool.ruff.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 60

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Relaxed for streamlit apps
ignore_missing_imports = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
check_untyped_defs = true
no_implicit_reexport = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-ra -q --strict-markers --tb=short"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "streamlit: marks tests for streamlit components",
]

# Coverage configuration
[tool.coverage.run]
source = [".", "streamlit_app", "utils", "core", "api"]
omit = [
    "tests/*",
    "venv/*",
    ".venv/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Build system configuration for uv
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


