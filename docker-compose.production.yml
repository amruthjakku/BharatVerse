version: '3.9'

services:
  postgres:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_DB: bharatverse
      POSTGRES_USER: bharatverse_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - bharatverse-network

  redis:
    image: redis:7-alpine
    restart: always
    command: redis-server --appendonly yes
    volumes:
      - redisdata:/data
    networks:
      - bharatverse-network

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    volumes:
      - miniodata:/data
    networks:
      - bharatverse-network
    restart: always

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=bharatverse_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=bharatverse
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MINIO_HOST=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    volumes:
      - ./models_cache:/app/models_cache
    networks:
      - bharatverse-network
    depends_on:
      - postgres
      - redis
      - minio
    restart: always
    deploy:
      resources:
        limits:
          memory: 8G  # For AI models
        reservations:
          memory: 4G

  streamlit:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    ports:
      - "80:8501"  # Expose on port 80
    environment:
      - API_URL=http://api:8000
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=bharatverse_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=bharatverse
      - REDIS_HOST=redis
      - MINIO_HOST=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - AI_MODE=production
    volumes:
      - ./models_cache:/app/models_cache
    networks:
      - bharatverse-network
    depends_on:
      - api
      - postgres
      - redis
      - minio
    restart: always
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    networks:
      - bharatverse-network
    depends_on:
      - streamlit
    restart: always

volumes:
  pgdata:
  redisdata:
  miniodata:

networks:
  bharatverse-network:
    driver: bridge